name: Docker Build and Push

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: 缓存 Maven 依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Maven 编译和测试
      run: |
        # 检查项目结构
        echo "📝 项目结构:"
        ls -la
        echo ""
        echo "📋 子模块:"
        ls -la */pom.xml 2>/dev/null || echo "无子模块"
        echo ""
        
        # 编译和测试
        mvn clean compile -B -DskipTests=false
        echo "✅ Maven 编译完成"

    - name: Maven 打包
      run: |
        # 为多模块项目打包
        if [ -f "user-service/pom.xml" ]; then
          echo "📦 检测到多模块项目，打包所有子模块"
          mvn package -B -DskipTests=true -pl user-service,product-service,gateway-service
        else
          echo "📦 单模块项目打包"
          mvn package -B -DskipTests=true
        fi
        echo "✅ Maven 打包完成"

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录到 GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取镜像元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: 构建和推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 镜像安全扫描
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 上传安全扫描结果
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 微服务构建任务
  build-microservices:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [user-service, product-service, gateway-service]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: 缓存 Maven 依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: 编译 ${{ matrix.service }}
      run: |
        # 从根目录编译指定模块（与本地构建方式一致）
        mvn clean package -B -DskipTests=true -pl ${{ matrix.service }}
        echo "✅ ${{ matrix.service }} 编译完成"

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录到 GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取镜像元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-

    - name: 构建和推送 ${{ matrix.service }} 镜像
      uses: docker/build-push-action@v5
      with:
        context: .  # ✅ 修复：从根目录构建（与本地构建方式一致）
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署通知
  notify:
    runs-on: ubuntu-latest
    needs: [build, build-microservices]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: 发送构建通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          🚀 Docker 镜像构建完成
          📦 仓库: ${{ github.repository }}
          🌟 分支: ${{ github.ref }}
          📝 提交: ${{ github.sha }}
          🔗 链接: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}